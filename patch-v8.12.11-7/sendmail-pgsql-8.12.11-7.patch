diff -urN sendmail-8.12.11-dist/sendmail/conf.c sendmail-8.12.11/sendmail/conf.c
--- sendmail-8.12.11-dist/sendmail/conf.c	2003-01-15 19:17:14.000000000 +0000
+++ sendmail-8.12.11/sendmail/conf.c	2003-03-04 18:17:11.000000000 +0000
@@ -496,6 +496,12 @@
 		ldapmap_lookup, null_map_store);
 #endif /* LDAPMAP */
 
+#ifdef PGSQLMAP
+	MAPDEF("pgsql", NULL, 0,
+		pgsql_map_parseargs, pgsql_map_open, pgsql_map_close,
+ 		pgsql_map_lookup, null_map_store);
+#endif /* PGSQLMAP */
+ 
 #if PH_MAP
 	MAPDEF("ph", NULL, MCF_NOTPERSIST,
 		ph_map_parseargs, ph_map_open, ph_map_close,
@@ -5556,6 +5570,9 @@
 #if LDAPMAP
        "LDAPMAP",
 #endif /* LDAPMAP */
+#if PGSQLMAP
+       "PGSQLMAP",
+#endif /* PGSQLMAP */
 #if LOG
        "LOG",
 #endif /* LOG */
diff -urN sendmail-8.12.11-dist/sendmail/map.c sendmail-8.12.11/sendmail/map.c
--- sendmail-8.12.11-dist/sendmail/map.c	2002-12-03 17:01:15.000000000 +0000
+++ sendmail-8.12.11/sendmail/map.c	2003-03-04 18:14:25.000000000 +0000
@@ -4871,6 +4871,298 @@
 	}
 }
 #endif /* LDAPMAP */
+
+#ifdef PGSQLMAP
+#include <libpq-fe.h>
+ 
+/* 
+** PostgreSQL map functionality for Sendmail 8.10.2
+** Portions Copyright (C) 2000 Jonathan Yarden <jyarden@bluegrass.net>
+**
+** For information on PostgreSQL, visit http://www.postgresql.org
+**
+** This patch, because it integrates with and is based on the existing
+** prior work of Sendmail, is considered by me to be a "derivative
+** work" subject to the Sendmail licensing terms.  Sendmail, Inc. in not
+** responsable for this code.
+**
+** USE AT YOUR OWN RISK.  NO WARRANTY OF ANY KIND IS PROVIDED. PLEASE
+** READ THE INSTRUCTIONS FOR USE OF THIS PATCH BEFORE CONTACTING THE
+** AUTHOR OR SENDMAIL, INC.  NO SUPPORT OF ANY KIND WILL BE PROVIDED
+** BY SENDMAIL, INC. FOR THIS PATCH.
+*/
+
+/*
+** Really simple quote skipping function.
+**
+*/
+char *skip_quotes(char *p)
+{
+   p = strchr(p,'"');
+   if (p) {
+      p++;
+      p = strchr(p,'"');
+      if (p) p++;
+   }
+   return p;
+}
+/*
+** Parse PostgreSQL map definition args.
+**
+** Nothing really special here, since to be perfectly honest, I have never
+** seen or used almost all of these options.  Most of this code was taken
+** directly from existing Sendmail source code.
+*/
+bool
+pgsql_map_parseargs(map,args)
+	MAP *map;
+	char *args;
+{
+	register char *p = args;
+
+
+	map->map_mflags |= MF_TRY0NULL | MF_TRY1NULL;
+	for (;;)
+	{
+		while (isascii(*p) && isspace(*p))
+			p++;
+		   if (*p != '-')
+			   break;
+		   switch (*++p)
+		   {
+		      case 'N':
+			      map->map_mflags |= MF_INCLNULL;
+			map->map_mflags &= ~MF_TRY0NULL;
+			break;
+
+		  case 'O':
+			map->map_mflags &= ~MF_TRY1NULL;
+			break;
+
+		  case 'o':
+			map->map_mflags |= MF_OPTIONAL;
+			break;
+
+		  case 'f':
+			map->map_mflags |= MF_NOFOLDCASE;
+			break;
+
+		  case 'm':
+ 			map->map_mflags |= MF_MATCHONLY;
+ 			break;
+ 
+ 		  case 'A':
+ 			map->map_mflags |= MF_APPEND;
+ 			break;
+ 
+ 		  case 'q':
+ 			map->map_mflags |= MF_KEEPQUOTES;
+ 			break;
+ 
+ 		  case 't':
+ 			map->map_mflags |= MF_NODEFER;
+ 			break;
+ 
+ 		  case 'a':
+ 			map->map_app = ++p;
+ 			break;
+ 
+ 		  case 'T':
+ 			map->map_tapp = ++p;
+ 			break;
+ 
+ /* 
+ ** Start of PostgreSQL specific args.  I cheat and use some existing
+ ** Sendmail variables here, but since this map class makes no other
+ ** use of them.
+ */
+ 
+ 		  case 'c':		/* connection string */
+ 		   map->map_keycolnm = ++p;
+ 		   p = skip_quotes(p);
+ 			break;
+ /*
+ ** I noticed this option seems to be a Sun-specific thingy, but since it's
+ ** map-class specific, I have no problem using it here.
+ */
+ 		  case 's':		/* select statement */
+ 		   map->map_valcolnm = ++p;
+ 		   p = skip_quotes(p);
+ 			break;
+ 		}
+ 
+ 		if (*p != '\0')
+ 			*p++ = '\0';
+ 	}
+ 	if (map->map_app != NULL)
+ 		map->map_app = newstr(map->map_app);
+ 	if (map->map_tapp != NULL)
+ 		map->map_tapp = newstr(map->map_tapp);
+ 	if (map->map_keycolnm != NULL) { /* database connect string */
+ 		map->map_keycolnm = newstr(map->map_keycolnm);
+ 		stripquotes(map->map_keycolnm);
+   } else {
+      syserr("No PostgreSQL connect string for %s map %s",
+             map->map_class->map_cname, map->map_mname);
+      return false;
+   }
+   if (map->map_valcolnm != NULL) { /* select statement */
+	map->map_valcolnm = newstr(map->map_valcolnm);
+	stripquotes(map->map_valcolnm);
+   } else {
+      syserr("No PostgreSQL select statement for %s map %s",
+             map->map_class->map_cname, map->map_mname);
+      return false;
+   }
+	return true;
+}
+ 
+/*
+** Open a PostgreSQL database connection using the connection string.
+**
+** Returns true if the database was opened or false if it choked. 
+**
+** July 7, 2000 [jdy]
+**
+** - Changed to check return status better on open and save
+**   PID to fix Broken pipes from child processes closing the
+**   connection on us.
+*/
+bool
+pgsql_map_open(map, mode)
+   MAP *map;
+   int mode;
+{
+   PGconn *conn;
+   
+   conn=PQconnectdb(map->map_keycolnm);
+   if (!conn || PQstatus(conn) == CONNECTION_BAD) {
+      if (conn) PQfinish(conn);
+      syserr("Cannot open %s map %s using \"%s\"",
+             map->map_class->map_cname,map->map_mname,map->map_keycolnm);
+      return false;
+   }
+   map->map_db1 = (ARBPTR_T) conn;
+   map->map_pid = getpid(); /* save PID for check on close */
+   return true;
+}   
+
+/*
+** Close the PostgreSQL database connection.
+**
+** July 7, 2000 [jdy]
+**
+** - Check that the opening process is the closing process; ignore if not.
+*/
+void
+pgsql_map_close(map)
+   MAP *map;
+{
+   if (map->map_pid == getpid())
+      PQfinish((PGconn *)map->map_db1);
+}
+
+/*
+** PGSQL_MAP_LOOKUP -- look up a datum in a PGSQL map
+**
+** Attempt to map an incoming key value with a PostgreSQL query.
+**
+** This performs the query specified in the Sendmail config file and
+** uses the value of the first row and column as the map data value.
+** All other rows and columns are ignored.
+**
+** July 8, 2000
+** 
+** - Modified to check the status of the PostgreSQL connection and reset it
+**   if it looks like it has dropped.  This was done to flush out an error,
+**   but it's a good idea to do this anyway just in case.
+** 
+*/
+char *
+pgsql_map_lookup(map, name, av, statp)
+   MAP *map;
+   char *name;
+   char **av;
+   int *statp;
+{
+   int len,ntuples;
+   char *sbuf, *tbuf;
+   char sname[MAXNAME+1];
+   char resbuf[MAXNAME+1];
+   PGconn *conn = (PGconn *) map->map_db1;
+   PGresult *res;
+/*
+** Clear the working strings.
+*/   
+   bzero(sname,sizeof sname);
+   bzero(resbuf,sizeof resbuf);
+/*
+** Buffer overflow check.
+*/   
+   len = strlen(name);
+   if (len > MAXNAME) len=MAXNAME;
+   bcopy(name,sname,len);
+   
+   if (!bitset(MF_NOFOLDCASE, map->map_mflags))
+      makelower(sname);
+/*
+** Allocate query buffer (select statement + key value)
+*/   
+   len = strlen(map->map_valcolnm) + strlen(sname);
+   sbuf = xalloc(len);
+   tbuf = xalloc((len*2)+1);
+   bzero(sbuf,len);
+/*
+** Check the backend to make sure it's still valid.  If it's not, try and
+** reset the connection.  This is a good idea anyway, just in case
+** the backend died.  BTW this is how I discovered the "child close" bug.
+*/
+   if (PQstatus(conn) == CONNECTION_BAD) {
+      PQreset(conn); /* does this block?  I hope so */
+      if (PQstatus(conn) == CONNECTION_BAD) {
+         PQfinish(conn);
+         syserr("Unable to reestablish closed PGSQL connection %s",map->map_keycolnm);
+         return NULL;
+      }
+   }         
+/*
+** Create SQL query statement and execute it
+*/   
+   sprintf(sbuf,map->map_valcolnm,sname);
+   PQescapeString(sbuf,tbuf,strlen(sbuf));
+
+   res = PQexec(conn,sbuf);
+   if (PQresultStatus(res) != PGRES_TUPLES_OK) {
+      PQclear(res);
+      syserr("Cannot query PGSQL database %s using %s",map->map_keycolnm,sbuf);
+      return NULL;
+   }
+/*
+** See if anything came back.  If no rows were returned, nothing there for
+** this query.
+*/
+   ntuples = PQntuples(res);
+   if (ntuples <= 0) {
+      PQclear(res);
+      return NULL;
+   }
+/*
+** Get the result from column 0 and clear the rest of the result.
+** If the result data is too big, then it's truncated.
+*/   
+   len = PQgetlength(res,0,0);
+   if (len > MAXNAME) len=MAXNAME;
+   bcopy(PQgetvalue(res,0,0),resbuf,len);
+   PQclear(res);
+/*
+** Process results like the other map classes do.
+*/
+	if (bitset(MF_MATCHONLY, map->map_mflags))
+		return map_rewrite(map, name, strlen(name), NULL);
+	else
+		return map_rewrite(map, resbuf, len, av);
+}
+#endif /* PGSQLMAP */
 /*
 **  PH map
 */
diff -urN sendmail-8.12.11-dist/sendmail/README sendmail-8.12.11/sendmail/README
--- sendmail-8.12.11-dist/sendmail/README	2003-01-15 19:17:15.000000000 +0000
+++ sendmail-8.12.11/sendmail/README	2003-03-04 18:17:58.000000000 +0000
@@ -119,6 +119,10 @@
 		have to install the UMich or OpenLDAP
 		(http://www.openldap.org/) ldap and lber libraries to use
 		this flag.
+PGSQLMAP	PostgreSQL SQL query support.  You will need to have
+		PostgreSQL include files and libraries installed to use this
+		feature.  Information on PostgreSQL can be found at
+		http://www.postgresql.org
 MAP_REGEX	Regular Expression support.  You will need to use an
 		operating system which comes with the POSIX regex()
 		routines or install a regexp library such as libregex from
